`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/03/04 14:47:28
// Design Name: 
// Module Name: Stepper motor pulse
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Stepper_motor_pulse(
    input M,
    output [2:0] state,
    input clk
    );
    reg clock;
    reg [2:0]current_state;
    reg [2:0]next_state;
    reg [25:0]counter;
    parameter s0 = 3'b000,
              s1 = 3'b001,
              s2 = 3'b010,
              s3 = 3'b011,
              s4 = 3'b100,
              s5 = 3'b101,
              s6 = 3'b110,
              s7 = 3'b111;
     initial begin clock  = 0; counter = 0;end
     always @(posedge clk) //分频
     begin
     if(counter == 26'd49999999)//100MHZ 1Hz
     begin
     clock <= ~clock;
     counter <= 0;
     end
     else counter <= counter +1 ;
     end
     always @(posedge clock) //状态转换
     begin
     current_state <= next_state;
     end
     
     always @ (current_state or M)//组合逻辑
     begin
     case (current_state)
     s0,s7:begin next_state = s4;end
     s4:begin next_state = (M ==0)?s6:s5; end
     s6:begin next_state = (M ==0)?s2:s4; end
     s2:begin next_state = (M ==0)?s3:s6; end
     s3:begin next_state = (M ==0)?s1:s2; end
     s1:begin next_state = (M ==0)?s5:s3; end
     s5:begin next_state = (M ==0)?s4:s1; end
     default begin next_state = s4; end
     endcase
     end         
     assign state = current_state;

    
    
    
endmodule
