`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/02/27 22:04:40
// Design Name: 
// Module Name: CLOCK
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module CLOCK(
    input clk,nCR,EN,
    input mode_hour,mode_min,//1-调整时间 0-正常计数
    output [7:0] an,//片选
    output[7:0] seg
    );
    wire clk_1k,clk_1,clk_2;
    wire[7:0]hour;
    wire[7:0]min;
    wire[7:0]sec;
    wire mode_sec;
    wire EN_sec_min,EN_min_hour;
    wire nCR_p;
    wire mode_hour_p,mode_min_p;
    assign EN_sec_min =(sec == 8'h59),
           EN_min_hour =(min == 8'h59),
           mode_sec = (mode_hour | mode_min);
           
    frequency1k fenpin1khz(clk,nCR_p,clk_1k);
    frequency1hz fenpin1hz(clk_1k,nCR_p,clk_1);
//    frequency2hz fenpin2hz(clk_1k,nCR_p,clk_2);
    
    counter60 CLOCK_sec(sec,nCR_p,EN,clk_1,mode_sec);
    counter60 CLOCK_min(min,nCR_p,EN_sec_min,clk_1,mode_min);
    counter24 CLOCK_hour(hour,nCR_p,EN_min_hour,clk_1,mode_hour);
    
    scan_led show(clk_1k,nCR_p,hour[7:4],hour[3:0],min[7:4],min[3:0],sec[7:4],sec[3:0],an,seg);
    
    prevent clear_nCR(clk_1k,0,0,nCR,nCR_p); //防抖动
//    prevent clear_mode_min(clk_1k,0,0,mode_min,mode_min_p);
//    prevent clear_mode_hour(clk_1k,0,0,mode_hour,mode_hour_p);
endmodule
//数24h
module counter24(
    output reg [7:0] Cnt,
    input nCR, EN, CP,
    input mode
);
    always @(posedge CP or posedge nCR) begin
    if (nCR) 
        Cnt <= 8'h00; // 复位到 00
    else if (EN && !mode) begin
        if (Cnt == 8'h23) // 23 时清零
            Cnt <= 8'h00;
        else if (Cnt[3:0] == 4'd9) begin // 个位进位
            Cnt[3:0] <= 4'd0;
            Cnt[7:4] <= Cnt[7:4] + 1'b1;
        end else
            Cnt[3:0] <= Cnt[3:0] + 1'b1;
    end
    else if (mode)begin //调整时间
        if (Cnt == 8'h23) // 23 时清零
            Cnt <= 8'h00;
        else if (Cnt[3:0] == 4'd9) begin // 个位进位
            Cnt[3:0] <= 4'd0;
            Cnt[7:4] <= Cnt[7:4] + 1'b1;
        end else
            Cnt[3:0] <= Cnt[3:0] + 1'b1;
    end
    
end
endmodule
//数60
module counter60(
    output reg [7:0] Cnt,
    input nCR, EN, CP,
    input mode
);
    always @(posedge CP or posedge nCR) begin
        if (nCR)
            Cnt <= 8'b00000000; // 复位
        else if (~EN)
            Cnt <= Cnt; // 保持当前状态
        else if(EN && !mode)begin
            if (Cnt[3:0] == 4'd9) begin
            if (Cnt[7:4] == 4'd5)
                Cnt <= 8'b00000000; // 计数到59后归零
            else
                Cnt <= {Cnt[7:4] + 1'b1, 4'b0000}; // 十位进位，个位归零
        end else
            Cnt <= Cnt + 1'b1; // 递增
    end
        else if(mode)begin  //调整时间
        if (Cnt[3:0] == 4'd9) begin
            if (Cnt[7:4] == 4'd5)
                Cnt <= 8'b00000000; // 计数到59后归零
            else
                Cnt <= {Cnt[7:4] + 1'b1, 4'b0000}; // 十位进位，个位归零
        end else
            Cnt <= Cnt + 1'b1; // 递增
        end
    end
endmodule

//数码管显示部分
//第一种
//module scan_led(clk,nCR,hex0,hex1,hex2,hex3,hex4,hex5,an,seg);//1khz
//    input clk,nCR;
//    input [3:0] hex0;//小时的十位
//    input [3:0] hex1;//小时的个位
//    input [3:0] hex2;//分的十位
//    input [3:0] hex3;//分的个位
//    input [3:0] hex4;//秒的十位
//    input [3:0] hex5;//秒的个位
//    output reg[7:0] an;//片选
//    output reg [7:0] seg;
    
//    reg [2:0]temp = 0;//用于循环控制片选信号
//    reg [3:0]hex_in;
    
//    always @(posedge clk or posedge nCR) begin
//        if (nCR) temp <= 3'b000; // 复位时初始化 temp
//        else if (temp == 3'b101) temp <= 3'b000;
//        else temp <= temp + 1'b1;
//    end
//    always @(posedge clk or posedge nCR)
//    begin
//    if (nCR) begin 
//    an <= 8'b11111111; // 关闭所有数码管
//    hex_in <= 4'b0000;
//    end
//    else
//    case (temp)
//    3'b000:begin an <= 8'b11111110; hex_in <= hex0; end//秒的个位？？？？？？？？？？？？？
//    3'b001:begin an <= 8'b11011111; hex_in <= hex1; end
//    3'b010:begin an <= 8'b11101111; hex_in <= hex2; end
//    3'b011:begin an <= 8'b11110111; hex_in <= hex3; end
//    3'b100:begin an <= 8'b11111011; hex_in <= hex4; end
//    3'b101:begin an <= 8'b11111101; hex_in <= hex5; end //秒的十位？？？？？？？？？？？
//    default: begin an[7:0] <= 8'b11111111; hex_in <= 4'b0000; end
//    endcase
    
//    end

//    always @(posedge clk or posedge nCR)
//    begin
//    if (nCR) begin seg <= 8'b11111111;  end
//    else
//    case(hex_in)
//            4'h0: seg[7:0] <= 8'b00000011;
//            4'h1: seg[7:0] <= 8'b10011111;
//			4'h2: seg[7:0] <= 8'b00100101;
//			4'h3: seg[7:0] <= 8'b00001101;
//			4'h4: seg[7:0] <= 8'b10011001;
//			4'h5: seg[7:0] <= 8'b01001001;
//			4'h6: seg[7:0] <= 8'b01000001;
//			4'h7: seg[7:0] <= 8'b00011111;
//			4'h8: seg[7:0] <= 8'b00000001;
//			4'h9: seg[7:0] <= 8'b00001001;
//			default seg[7:0] <= 8'b01110000;
//			endcase
//    end
//endmodule
 
 
 //第二种
 module scan_select(
    input clk,  // 1kHz 时钟
    input nCR,  
    input [3:0] hex0, hex1, hex2, hex3, hex4, hex5, // 各位BCD数
    output reg [7:0] an,  // 片选信号
    output reg [3:0] hex_out  // 当前选中的BCD数
);
    reg [2:0] temp = 3'b000;  // 片选计数器

    always @(posedge clk or posedge nCR) begin
        if (nCR)
            temp <= 3'b000;
        else if (temp == 3'b101)
            temp <= 3'b000;
        else
            temp <= temp + 1'b1;
    end

    always @(posedge clk or posedge nCR) begin
        if (nCR) begin
            an <= 8'b11111111;  // 关闭所有数码管
            hex_out <= 4'b0000;
        end else begin
            case (temp)
    3'b000:begin an <= 8'b01111111; hex_out <= hex0; end
    3'b001:begin an <= 8'b10111111; hex_out <= hex1; end
    3'b010:begin an <= 8'b11011111; hex_out <= hex2; end
    3'b011:begin an <= 8'b11101111; hex_out <= hex3; end
    3'b100:begin an <= 8'b11110111; hex_out <= hex4; end
    3'b101:begin an <= 8'b11111011; hex_out <= hex5; end 
            endcase
        end
    end
endmodule
module seg_display(
    input [3:0] hex_in,  // BCD输入
    input nCR,           
    output reg [7:0] seg // 7 段数码管输出
);
    always @(*) begin
        if (nCR)
            seg = 8'b11111111;  // 复位时关闭所有段
        else
            case (hex_in)
                4'h0: seg = 8'b00000011;  // 0
                4'h1: seg = 8'b10011111;  // 1
                4'h2: seg = 8'b00100101;  // 2
                4'h3: seg = 8'b00001101;  // 3
                4'h4: seg = 8'b10011001;  // 4
                4'h5: seg = 8'b01001001;  // 5
                4'h6: seg = 8'b01000001;  // 6
                4'h7: seg = 8'b00011111;  // 7
                4'h8: seg = 8'b00000001;  // 8
                4'h9: seg = 8'b00001001;  // 9
                default: seg = 8'b01110000;  // 显示 "-"
            endcase
    end
endmodule
module scan_led(
    input clk, nCR,  // 时钟 & 复位
    input [3:0] hex0, hex1, hex2, hex3, hex4, hex5, // BCD 输入
    output [7:0] an,  // 片选信号
    output [7:0] seg  // 数码管显示信号
);
    wire [3:0] hex_out;  // 当前片选的BCD数据

    // 实例化片选模块
    scan_select scan_inst (
        .clk(clk),
        .nCR(nCR),
        .hex0(hex0), .hex1(hex1), .hex2(hex2), 
        .hex3(hex3), .hex4(hex4), .hex5(hex5),
        .an(an),
        .hex_out(hex_out)
    );

    // 实例化数码管译码模块
    seg_display display_inst (
        .hex_in(hex_out),
        .nCR(nCR),
        .seg(seg)
    );
endmodule

//分频1k
module frequency1k(
input CP,nCR,
output reg CLK_1k = 0
    );
reg [15:0] state;
always@(posedge CP or posedge nCR)
begin
if (nCR) begin state <= 16'b0;  end
else
 if(state<49999) state<=state+1'b1;//由100MHZ脉冲产生1KHZ脉冲，每计数50000输出翻转一次
 else 
 begin
 CLK_1k<=~CLK_1k;
 state<=0;
 end
end
endmodule

//分频1hz
module frequency1hz(
input CP,nCR,
output reg CLK_1 = 0
    );
reg [15:0] state;
always@(posedge CP or posedge nCR)
begin
if (nCR) begin state <= 16'b0;  end
else
 if(state<499) state<=state+1'b1;//由1khz脉冲产生1HZ脉冲
 else 
 begin
 CLK_1<=~CLK_1;
 state<=0;
 end
end
endmodule

//分频2hz，方便调整时间
module frequency2hz(
input CP,nCR,
output reg CLK_2 = 0
    );
reg [15:0] state;
always@(posedge CP or posedge nCR)
begin
if (nCR) begin state <= 16'b0;  end
else
 if(state<249) state<=state+1'b1;//由1khz脉冲产生1HZ脉冲
 else 
 begin
 CLK_2<=~CLK_2;
 state<=0;
 end
end
endmodule
 //RS触发器，防止抖动
module prevent(   
input CP,R,S,CPCLOCK,
output reg pCPCLOCK=0
    );
always@(posedge CP)
begin
case({R,S})
2'b00:pCPCLOCK<=CPCLOCK;
2'b01:pCPCLOCK<=1'b1;
2'b10:pCPCLOCK<=0;
2'b11:pCPCLOCK<=pCPCLOCK;
endcase
end

endmodule

